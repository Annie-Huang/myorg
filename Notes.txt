https://nx.dev/web/guides/cli
https://nrwl.io/
https://nx.dev/web/tutorial/01-create-application
https://nx.dev/angular/getting-started/what-is-nx
https://nx.dev/angular/tutorial/01-create-application
https://nx.dev/angular/fundamentals/build-full-stack-applications

https://github.com/Annie-Huang/myorg

https://connect.nrwl.io/app/dashboard

https://intellij-support.jetbrains.com/hc/en-us/community/posts/115000770044-Typescript-inspections-sometimes-unreliable-and-or-slow?page=1#comments
https://github.com/nrwl/nx/issues/1979
https://github.com/thymikee/jest-preset-angular/releases/tag/v8.0.0
https://nx.dev/angular/fundamentals/use-modern-tools
https://nx.dev/angular/fundamentals/build-full-stack-applications
https://nx.dev/angular/fundamentals/monorepos-automation
https://nx.dev/react/guides/cli


C:\react\myorg>ng serve todos       <<< http://localhost:4200/
C:\react\myorg>ng serve api         <<< http://localhost:3333/api/todos     << if you only go to


Restart TS server:
invalidating caches (File | Invalidate caches, Invalidate and restart)
Or, restart the machine


------------------------


C:\react>npx create-nx-workspace@latest myorg
C:\react\myorg>ng add @nrwl/angular --defaults
C:\react\myorg>npm audit fix      <<< fixed 0 of 5 vulnerabilities in 899799 scanned packages
C:\react\myorg>npm audit
C:\react\myorg>npm install --save-dev jest-preset-angular@8.0.0     <<< Suggestion from npm audit
C:\react\myorg>npm ls tree-kill
C:\react\myorg>ng g @nrwl/angular:application todos
C:\react\myorg>ng serve todos
C:\react\myorg>ng e2e todos-e2e --watch
C:\react\myorg>ng e2e todos-e2e --headless
C:\react\myorg>ng add @nrwl/nest
C:\react\myorg>ng g @nrwl/nest:app api --frontendProject=todos
C:\react\myorg>ng serve api     <<< http://localhost:3333/api
C:\react\myorg>ng g @nrwl/workspace:lib data
C:\react\myorg>ng g @nrwl/angular:lib ui
C:\react\myorg>ng g component todos --project=ui --export
C:\react\myorg>npm run dep-graph        <<< http://localhost:4211/
C:\react\myorg>npm run affected:apps
C:\react\myorg>npm run affected:libs
C:\react\myorg>npm run affected:test
C:\react\myorg>npm run affected:test -- --only-failed
C:\react\myorg>npm run affected:test -- --parallel
C:\react\myorg>npm run affected:build
C:\react\myorg>npm run affected -- --target=build
C:\react\myorg>npm run affected -- --target=invalid --base=master

------------------------

CLI:
npm install -g @nrwl/cli
yarn global add @nrwl/cli

list:
nx list
nx list @nrwl/web                     <<< list the schematics within a specific collection :

Workspace:
npx --ignore-existing create-nx-workspace happynrwl
npx --ignore-existing create-nx-workspace happynrwl --preset=next

Update nx:
nx migrate @nrwl/workspace
nx migrate @nrwl/workspace@version                                  # you can also specify version
nx migrate --run-migrations=migrations.json
nx migrate @nrwl/workspace --to="jest@22.0.0,cypress:3.4.0"
nx migrate @nrwl/workspace --to="@nrwl/jest@8.0.0"                  <<<< Nx uses currently installed packages to calculate what migrations need to run. You can override them like this
git reset --hard                                                    # Reset any changes
git clean -fd                                                       # Delete newly added files and directories

-----------

Jest:
ng g application frontend             <<< By default, Nx uses Jest for both Angular and React and Node.js applications
nx g @nrwl/react:app frontend


Karma:
ng g @nrwl/angular:application frontend --unit-test-runner=karma.

Cypress:
nx g @nrwl/react:application          <<< By default, when creating a new React application, Nx uses Cypress to create the e2e tests project.
nx g @nrwl/web:app frontend

Angular:
yarn add --dev @nrwl/angular
ng add @nrwl/angular                        # Add Angular Capabilities to a workspace
ng g @nrwl/angular:application frontend     # Generate an Angular Application
ng e2e frontend-e2e to run e2e tests
ng e2e frontend-e2e --watch to run e2e tests in the watch mode
ng e2e frontend-e2e --headless to run e2e tests in the headless mode (used in CI)
ng g @nrwl/angular:library mylib            # Generate an Angular Library

NgRx:
ng g @nrwl/angular:ngrx <featurename> --module=<path-to-module> --defaults [options]
ng g @nrwl/angular:ngrx app --module=apps/<appname>/src/app/app.module.ts --root --minimal
ng g @nrwl/angular:lib products
ng g @nrwl/angular:ngrx products --module=libs/products/src/lib/products.module.ts --directory +state/products --syntax=creators --defaults


React:
yarn add --dev @nrwl/react
ng add @nrwl/react                          # Add React Capabilities to a workspace
ng g @nrwl/react:application myapp          # Generate a React Application
nx generate @nrwl/react:application myapp --style=scss
ng g @nrwl/react:library mylib              # Generate a React Library


Web Components:
yarn add --dev @nrwl/web                    # Add Web capabilities to a workspace
nx g @nrwl/web:application myapp            # Generate a Web application


Angular Libraries:
nx g @nrwl/angular:library mylib            # Generate an Angular Library

React Libraries:
nx g @nrwl/react:library mylib              # Generate a React Library
nx g @nrwl/react:lib shared-components

Typescript Libraries:
ng g @nrwl/workspace:library mylib          # Generate a Typescript Library


By default, libraries are only buildable in the context of an application.
ng test mylib                               # to test the library.
ng lint mylib                               # to lint the library

Using Protractor:
ng g @nrwl/angular:application frontend --e2e-test-runner=protractor


Prettier:
nx format:write to format the files
nx format:check to check the formatted files


Nest:
yarn add --dev @nrwl/nest
ng add @nrwl/nest                           # Add Nest Capabilities to a workspace
ng g @nrwl/nest:application api             # Generate a Nest Application
ng serve api to serve the application
ng build api to build the application
ng test api to test the application
ng generate @nestjs/schematics:controller mycontroller --sourceRoot=apps/nestapp/src --path=app
                                            <<< Adding a Nest app will also add Nest schematics to the workspace


Using Express
yarn add --dev @nrwl/express
ng add @nrwl/express                        # Add Express Capabilities to a workspace
ng g @nrwl/express:application api          # Create an Express Application


Using Other Frameworks:
yarn add --dev @nrwl/node
ng add @nrwl/node                           # Add Node Capabilities to a workspace
ng g @nrwl/node:application api             # Create a Node Application


Next.js:
yarn add --dev @nrwl/next
nx g @nrwl/next:application tasks


Using Storybook
nx g @nrwl/angular:storybook-configuration project-name
nx g @nrwl/react:storybook-configuration project-name
nx run project-name:storybook
nx run project-name-e2e:e2e


##################################################################################################
How do you find out what options are available in nx (since nx documentation is very poor)

!!!! Everything is in workspace.json
If you look at workspace.json:
    "ui": {
      "architect": {
        "lint": {...}
        "test": {...}
        "storybook": {...}
        "build-storybook": {...}
      }
    },
C:\react\myorg6>nx storybook ui
C:\react\myorg6>nx storybook ui --help        << help will list out all the sub options you can have with the task

-----

And if you want to know what are the generation options your installed @nrwl/XXX can have:
1. Check all the @nrwl/XXX you install in your package.json,

2: Then look into the source file in nx git repo:
  "name": "@nrwl/react",              https://github.com/nrwl/nx/blob/master/packages/react/package.json
    "extends": ["@nrwl/workspace"],   https://github.com/nrwl/nx/blob/master/packages/react/collection.json
    init | application | library | component | redux | storybook-configuration | component-story | stories | component-cypress-spec


  "name": "@nrwl/web",                https://github.com/nrwl/nx/blob/master/packages/web/package.json
     "extends": ["@nrwl/workspace"],  https://github.com/nrwl/nx/blob/master/packages/web/collection.json
      init | application


  "name": "@nrwl/workspace",          https://github.com/nrwl/nx/blob/master/packages/workspace/package.json
                                      https://github.com/nrwl/nx/blob/master/packages/workspace/collection.json
     workspace | ng-add | preset | move | remove | ng-new | tao-new | library | workspace-schematic

  So you will have this list:
  nx generate @nrwl/react:application
  nx generate @nrwl/react:library
  nx generate @nrwl/react:component
  nx generate @nrwl/react:redux
  nx generate @nrwl/react:storybook-configuration
  nx generate @nrwl/react:component-story
  nx generate @nrwl/react:stories
  nx generate @nrwl/react:component-cypress-spec
  nx generate @nrwl/web:application
  nx generate @nrwl/workspace:move
  nx generate @nrwl/workspace:remove
  nx generate @nrwl/workspace:library

3. Again, further suboptions can be find with --help, e.g.
  nx generate @nrwl/react:application --help


##################################################################################################

C:\react>npx create-nx-workspace@latest myorg
npx: installed 169 in 21.611s
? What to create in the new workspace (Use arrow keys)
> empty             [an empty workspace]
  web components    [a workspace with a single app built using web components]
  angular           [a workspace with a single Angular application]
  angular-nest      [a workspace with a full stack application (Angular + Nest)]
  react             [a workspace with a single React application]
  react-express     [a workspace with a full stack application (React + Express)]
  next.js           [a workspace with a single Next.js application]
? CLI to power the Nx workspace
  Nx           [Extensible CLI for JavaScript and TypeScript applications]
> Angular CLI  [Extensible CLI for Angular applications. Recommended for Angular projects.]

----------------------------------------------------

C:\react\myorg>ng add @nrwl/angular --defaults

C:\react\myorg>npm audit fix      <<< fixed 0 of 5 vulnerabilities in 899799 scanned packages
C:\react\myorg>npm audit
C:\react\myorg>npm install --save-dev jest-preset-angular@8.0.0     <<< Suggestion from npm audit


C:\react\myorg>npm ls tree-kill
myorg@0.0.0 C:\react\myorg
+-- @angular-devkit/build-angular@0.803.22
| +-- @ngtools/webpack@8.3.22
| | `-- tree-kill@1.2.1  deduped
| `-- tree-kill@1.2.1
`-- @nrwl/cypress@8.11.0
  `-- tree-kill@1.2.1  deduped

Manually fix the tree-kill volunerability by:
npm install tree-kill
> find the dependency hash in the library. which is
    "tree-kill": {
      "version": "1.2.2",
      "resolved": "https://registry.npmjs.org/tree-kill/-/tree-kill-1.2.2.tgz",
      "integrity": "sha512-L0Orpi8qGpRG//Nd+H90vFB+3iHnue1zSSGmNOOCh1GLJ7rUKVwV2HvijphGQS2UmhUZewS9VgvxYIdgr+fG1A=="
    },
> Replace it in package-lock.json
> and update all versions of
tree-kill": "1.2.1",
to
"tree-kill": "1.2.2",

----------------------------------------------------


C:\react\myorg>ng g @nrwl/angular:application todos
? Which stylesheet format would you like to use?
  CSS
> SASS(.scss)  [ http://sass-lang.com   ]
  Stylus(.styl)[ http://stylus-lang.com ]
  LESS         [ http://lesscss.org     ]
? Would you like to configure routing for this application? (y/N) N

The structure after the above command becomes:
myorg/
├── apps/
│   ├── todos/
│   │   ├── src/
│   │   │   ├── app/
│   │   │   ├── assets/
│   │   │   ├── environments/
│   │   │   ├── favicon.ico
│   │   │   ├── index.html
│   │   │   ├── main.ts
│   │   │   ├── polyfills.ts
│   │   │   ├── styles.scss
│   │   │   └── test.ts
│   │   ├── browserslist
│   │   ├── jest.conf.js
│   │   ├── tsconfig.app.json
│   │   ├── tsconfig.json
│   │   ├── tsconfig.spec.json
│   │   └── tslint.json
│   └── todos-e2e/
│       ├── src/
│       │   ├── fixtures/
│       │   │   └── example.json
│       │   ├── integration/
│       │   │   └── app.spec.ts
│       │   ├── plugins/
│       │   │   └── index.ts
│       │   └── support/
│       │       ├── app.po.ts
│       │       ├── commands.ts
│       │       └── index.ts
│       ├── cypress.json
│       ├── tsconfig.e2e.json
│       ├── tsconfig.jsonp
│       └── tslint.json
├── libs/
├── tools/
├── angular.json
├── nx.json
├── package.json
├── tsconfig.json
├── tslint.json
└── README.md

----------------------------------------------------

C:\react\myorg>ng serve todos
C:\react\myorg>ng e2e todos-e2e --watch
C:\react\myorg>ng e2e todos-e2e --headless

C:\react\myorg>ng add @nrwl/nest
C:\react\myorg>ng g @nrwl/nest:app api --frontendProject=todos
? In which directory should the node application be generated?    <<< just click Enter for this question...

It will generate this structure:
myorg/
├── apps/
│   ├── todos/
│   ├── todos-e2e/
│   └── api/
│       ├── src/
│       │   ├── app/
│       │   │   ├── app.controller.ts
│       │   │   ├── app.controller.spec.ts
│       │   │   ├── app.module.ts
│       │   │   ├── app.service.ts
│       │   │   └── app.service.spec.ts
│       │   ├── assets/
│       │   ├── environments/
│       │   │   ├── environment.ts
│       │   │   └── environment.prod.ts
│       │   └── main.ts
│       ├── jest.conf.js
│       ├── proxy.conf.json
│       ├── tsconfig.app.json
│       ├── tsconfig.json
│       ├── tsconfig.spec.json
│       └── tslint.json
├── libs/
├── angular.json
├── nx.json
├── package.json
├── tools/
├── tsconfig.json
└── tslint.json


--frontendProject=todos
It created a proxy configuration that allows the Angular application to talk to the API in development.
In angular.json and find the serve target of the todos app.
{
  "serve": {
    "builder": "@angular-devkit/build-angular:dev-server",
    "options": {
      "browserTarget": "todos:build",
      "proxyConfig": "apps/todos/proxy.conf.json"
    },
    "configurations": {
      "production": {
        "browserTarget": "todos:build:production"
      }
    }
  }
}
proxy.conf.json:
{
  "/api": {
    "target": "http://localhost:3333",
    "secure": false
  }
}



----------------------------------------------------

C:\react\myorg>ng serve api     <<< http://localhost:3333/api

C:\react\myorg>ng g @nrwl/workspace:lib data

Both the backend and the frontend define the Todo interface.
The interface is in sync now, but in a real application, over time, it will diverge, and, as a result, runtime errors will creep in.
You should share this interface between the backend and the frontend. In Nx, you can do this by creating a library.

myorg/
├── apps/
│   ├── todos/
│   ├── todos-e2e/
│   └── api/
├── libs/
│   └── data/
│       ├── src/
│       │   ├── lib/
│       │   │   └── data.ts
│       │   └── index.ts
│       ├── jest.conf.js
│       ├── tsconfig.app.json
│       ├── tsconfig.json
│       ├── tsconfig.spec.json
│       └── tslint.json
├── workspace.json
├── nx.json
├── package.json
├── tools/
├── tsconfig.json
└── tslint.json


After you import { Todo } from '@myorg/data';
You will need to restart the TS server so that the new @myorg/data package is recognised.
This may need to be done every time a new workspace library is added:
    invalidating caches (File | Invalidate caches, Invalidate and restart)                  <<< Good info, I often got error line under import { XX } from '@AAA/BBB';
    https://intellij-support.jetbrains.com/hc/en-us/community/posts/115000770044-Typescript-inspections-sometimes-unreliable-and-or-slow?page=1#comments


----------------------------------------------------


C:\react\myorg>ng g @nrwl/angular:lib ui
? Which stylesheet format would you like to use? (Use arrow keys)
> CSS
  SASS(.scss)  [ http://sass-lang.com   ]
  Stylus(.styl)[ http://stylus-lang.com ]
  LESS         [ http://lesscss.org     ]

Libraries are not just a way to share code in Nx. They are also useful for factoring out code into small units with a well-defined public API.

Public API
Every library has an index.ts file, which defines its public API.
Other applications and libraries should only access what the index.ts exports. Everything else in the library is private.


myorg/
├── apps/
│   ├── todos/
│   ├── todos-e2e/
│   └── api/
├── libs/
│   ├── data/
│   └── ui/
│       ├── src/
│       │   ├── lib/
│       │   │   ├── ui.module.spec.ts
│       │   │   └── ui.module.ts
│       │   └── index.ts
│       ├── jest.conf.js
│       ├── tsconfig.app.json
│       ├── tsconfig.json
│       ├── tsconfig.spec.json
│       └── tslint.json
├── nx.json
├── package.json
├── tools/
├── tsconfig.json
└── tslint.json

----------------------------------------------------


C:\react\myorg>ng g component todos --project=ui --export

--export is to to make sure the newly added component is added into the export list in the module:
e.g. in ui.module.ts
@NgModule({
  imports: [CommonModule],
  declarations: [TodosComponent],
  exports: [TodosComponent]
})

myorg/
...
├── libs/
│   ├── data/
│   └── ui/
│       ├── src/
│       │   ├── lib/
│       │   │   ├── todos/
│       │   │   │   ├── todos.component.css
│       │   │   │   ├── todos.component.html
│       │   │   │   ├── todos.component.spec.ts
│       │   │   │   └── todos.component.ts
│       │   │   ├── ui.module.spec.ts
│       │   │   └── ui.module.ts
...


----------------------------------------------------

C:\react\myorg>npm run dep-graph        <<< http://localhost:4211/

C:\react\myorg>npm run affected:apps
  <<< looks at what you have changed and uses the dependency graph to figure out which apps can be affected by this change.

C:\react\myorg>npm run affected:libs
  <<< This command works similarly, but instead of printing the affected apps, it prints the affected libs.

C:\react\myorg>npm run affected:test
  <<< retest only the projects affected by the change.
      This got error of:
        Module jest-preset-angular/AngularSnapshotSerializer.js in the snapshotSerializers option was not found.
               <rootDir> is: C:\react\myorg\libs\ui
      Too lazy to fix. The lodgement-ui doesn't not use Jest anyway.

C:\react\myorg>npm run affected:test -- --only-failed
  <<< One of the projects failed. Instead of retesting every single project on every change, pass --only-failed to only retest the failed ones.

C:\react\myorg>npm run affected:test -- --parallel
  <<< to test affected projects in parallel


----------------------------------------------------


C:\react\myorg>npm run affected:build
C:\react\myorg>npm run affected -- --target=build
  <<< Both are the same
      Nx will rebuild todos app. Why didn't it rebuild ui?
      By default, Nx only builds libraries in the context of an application.

C:\react\myorg>npm run affected -- --target=invalid --base=master
  <<< No projects to run invalid
